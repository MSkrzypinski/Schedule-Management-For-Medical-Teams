// <auto-generated />
using System;
using Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Infrastructure.Migrations
{
    [DbContext(typeof(ScheduleManagementContext))]
    [Migration("20240107222408_addIsActive")]
    partial class addIsActive
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Domain.Entities.Coordinator", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Coordinators", "coordinators");
                });

            modelBuilder.Entity("Domain.Entities.MedicalTeam", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CoordinatorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CoordinatorId");

                    b.ToTable("MedicalTeams", "medicalTeams");
                });

            modelBuilder.Entity("Domain.Entities.MedicalWorker", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("Date")
                        .HasColumnName("Date of birth");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("MedicalWorkers", "medicalWorkers");
                });

            modelBuilder.Entity("Domain.Entities.Schedule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("CreationDate");

                    b.Property<Guid?>("MedicalTeamId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("MedicalTeamId");

                    b.ToTable("Schedules", "schedules");
                });

            modelBuilder.Entity("Domain.Entities.Shift", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CrewMemberId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DriverId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ManagerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("MedicalTeamId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ScheduleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CrewMemberId");

                    b.HasIndex("DriverId");

                    b.HasIndex("ManagerId");

                    b.HasIndex("MedicalTeamId");

                    b.HasIndex("ScheduleId");

                    b.ToTable("Shifts", "shifts");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Email");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Password");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PhoneNumber");

                    b.HasKey("Id");

                    b.ToTable("Users", "users");
                });

            modelBuilder.Entity("Domain.ValueObjects.MedicalWorkerProfessionsToPermissions", b =>
                {
                    b.Property<string>("MedicalWorkerProfession")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MedicRole")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MedicalTeamType")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("MedicalWorkerProfession", "MedicRole", "MedicalTeamType");

                    b.ToTable("MedicalWorkerProfessionToPermission", "medicalWorker");

                    b.HasData(
                        new
                        {
                            MedicalWorkerProfession = "BasicMedic",
                            MedicRole = "RegularMedic",
                            MedicalTeamType = "T"
                        },
                        new
                        {
                            MedicalWorkerProfession = "BasicMedic",
                            MedicRole = "Driver",
                            MedicalTeamType = "P"
                        },
                        new
                        {
                            MedicalWorkerProfession = "BasicMedic",
                            MedicRole = "Driver",
                            MedicalTeamType = "T"
                        },
                        new
                        {
                            MedicalWorkerProfession = "Paramedic",
                            MedicRole = "Driver",
                            MedicalTeamType = "T"
                        },
                        new
                        {
                            MedicalWorkerProfession = "Paramedic",
                            MedicRole = "Driver",
                            MedicalTeamType = "P"
                        },
                        new
                        {
                            MedicalWorkerProfession = "Paramedic",
                            MedicRole = "Driver",
                            MedicalTeamType = "S"
                        },
                        new
                        {
                            MedicalWorkerProfession = "Paramedic",
                            MedicRole = "Driver",
                            MedicalTeamType = "N"
                        },
                        new
                        {
                            MedicalWorkerProfession = "Paramedic",
                            MedicRole = "Manager",
                            MedicalTeamType = "P"
                        },
                        new
                        {
                            MedicalWorkerProfession = "Paramedic",
                            MedicRole = "Manager",
                            MedicalTeamType = "T"
                        },
                        new
                        {
                            MedicalWorkerProfession = "Paramedic",
                            MedicRole = "RegularMedic",
                            MedicalTeamType = "S"
                        },
                        new
                        {
                            MedicalWorkerProfession = "Paramedic",
                            MedicRole = "RegularMedic",
                            MedicalTeamType = "P"
                        },
                        new
                        {
                            MedicalWorkerProfession = "Paramedic",
                            MedicRole = "RegularMedic",
                            MedicalTeamType = "T"
                        },
                        new
                        {
                            MedicalWorkerProfession = "Paramedic",
                            MedicRole = "RegularMedic",
                            MedicalTeamType = "N"
                        },
                        new
                        {
                            MedicalWorkerProfession = "Nurse",
                            MedicRole = "Driver",
                            MedicalTeamType = "T"
                        },
                        new
                        {
                            MedicalWorkerProfession = "Nurse",
                            MedicRole = "Driver",
                            MedicalTeamType = "P"
                        },
                        new
                        {
                            MedicalWorkerProfession = "Nurse",
                            MedicRole = "Driver",
                            MedicalTeamType = "S"
                        },
                        new
                        {
                            MedicalWorkerProfession = "Nurse",
                            MedicRole = "Driver",
                            MedicalTeamType = "N"
                        },
                        new
                        {
                            MedicalWorkerProfession = "Nurse",
                            MedicRole = "Manager",
                            MedicalTeamType = "P"
                        },
                        new
                        {
                            MedicalWorkerProfession = "Nurse",
                            MedicRole = "Manager",
                            MedicalTeamType = "T"
                        },
                        new
                        {
                            MedicalWorkerProfession = "Nurse",
                            MedicRole = "RegularMedic",
                            MedicalTeamType = "S"
                        },
                        new
                        {
                            MedicalWorkerProfession = "Nurse",
                            MedicRole = "RegularMedic",
                            MedicalTeamType = "P"
                        },
                        new
                        {
                            MedicalWorkerProfession = "Nurse",
                            MedicRole = "RegularMedic",
                            MedicalTeamType = "T"
                        },
                        new
                        {
                            MedicalWorkerProfession = "Nurse",
                            MedicRole = "RegularMedic",
                            MedicalTeamType = "N"
                        },
                        new
                        {
                            MedicalWorkerProfession = "Doctor",
                            MedicRole = "Driver",
                            MedicalTeamType = "T"
                        },
                        new
                        {
                            MedicalWorkerProfession = "Doctor",
                            MedicRole = "Driver",
                            MedicalTeamType = "P"
                        },
                        new
                        {
                            MedicalWorkerProfession = "Doctor",
                            MedicRole = "Driver",
                            MedicalTeamType = "S"
                        },
                        new
                        {
                            MedicalWorkerProfession = "Doctor",
                            MedicRole = "Driver",
                            MedicalTeamType = "N"
                        },
                        new
                        {
                            MedicalWorkerProfession = "Doctor",
                            MedicRole = "Manager",
                            MedicalTeamType = "P"
                        },
                        new
                        {
                            MedicalWorkerProfession = "Doctor",
                            MedicRole = "Manager",
                            MedicalTeamType = "T"
                        },
                        new
                        {
                            MedicalWorkerProfession = "Doctor",
                            MedicRole = "Manager",
                            MedicalTeamType = "S"
                        },
                        new
                        {
                            MedicalWorkerProfession = "Doctor",
                            MedicRole = "Manager",
                            MedicalTeamType = "N"
                        },
                        new
                        {
                            MedicalWorkerProfession = "Doctor",
                            MedicRole = "RegularMedic",
                            MedicalTeamType = "S"
                        },
                        new
                        {
                            MedicalWorkerProfession = "Doctor",
                            MedicRole = "RegularMedic",
                            MedicalTeamType = "P"
                        },
                        new
                        {
                            MedicalWorkerProfession = "Doctor",
                            MedicRole = "RegularMedic",
                            MedicalTeamType = "T"
                        },
                        new
                        {
                            MedicalWorkerProfession = "Doctor",
                            MedicRole = "RegularMedic",
                            MedicalTeamType = "N"
                        });
                });

            modelBuilder.Entity("MedicalWorkerShift", b =>
                {
                    b.Property<Guid>("CrewId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ShiftsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CrewId", "ShiftsId");

                    b.HasIndex("ShiftsId");

                    b.ToTable("MedicalWorkerShift");
                });

            modelBuilder.Entity("Domain.Entities.Coordinator", b =>
                {
                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.MedicalTeam", b =>
                {
                    b.HasOne("Domain.Entities.Coordinator", "Coordinator")
                        .WithMany("MedicalTeams")
                        .HasForeignKey("CoordinatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Domain.ValueObjects.InformationAboutTeam", "InformationAboutTeam", b1 =>
                        {
                            b1.Property<Guid>("MedicalTeamId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)")
                                .HasColumnName("City");

                            b1.Property<string>("Code")
                                .IsRequired()
                                .HasMaxLength(15)
                                .HasColumnType("nvarchar(15)")
                                .HasColumnName("TeamCode");

                            b1.Property<string>("MedicalTeamType")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("MedicalTeamType");

                            b1.Property<int>("SizeOfTeam")
                                .HasColumnType("int")
                                .HasColumnName("SizeOfTeam");

                            b1.HasKey("MedicalTeamId");

                            b1.ToTable("MedicalTeams");

                            b1.WithOwner()
                                .HasForeignKey("MedicalTeamId");
                        });

                    b.Navigation("Coordinator");

                    b.Navigation("InformationAboutTeam");
                });

            modelBuilder.Entity("Domain.Entities.MedicalWorker", b =>
                {
                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.OwnsMany("Domain.Entities.EmploymentContract", "EmploymentContracts", b1 =>
                        {
                            b1.Property<Guid>("MedicalWorkerId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("ContractType")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("MedicRole")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("MedicalWorkerProfession")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<Guid?>("MedicalTeamId")
                                .HasColumnType("uniqueidentifier");

                            b1.HasKey("MedicalWorkerId", "ContractType", "MedicRole", "MedicalWorkerProfession");

                            b1.HasIndex("MedicalTeamId");

                            b1.ToTable("EmploymentContracts", "medicalWorkers");

                            b1.HasOne("Domain.Entities.MedicalTeam", "MedicalTeam")
                                .WithMany()
                                .HasForeignKey("MedicalTeamId");

                            b1.WithOwner()
                                .HasForeignKey("MedicalWorkerId");

                            b1.Navigation("MedicalTeam");
                        });

                    b.OwnsOne("Domain.ValueObjects.Address", "Address", b1 =>
                        {
                            b1.Property<Guid>("MedicalWorkerId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int?>("ApartmentNumber")
                                .HasColumnType("int")
                                .HasColumnName("ApartamentNumber");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("City");

                            b1.Property<int>("HouseNumber")
                                .HasColumnType("int")
                                .HasColumnName("HouseNumber");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("Street");

                            b1.Property<string>("ZipCode")
                                .IsRequired()
                                .HasMaxLength(6)
                                .HasColumnType("nvarchar(6)")
                                .HasColumnName("ZipCode");

                            b1.HasKey("MedicalWorkerId");

                            b1.ToTable("MedicalWorkers");

                            b1.WithOwner()
                                .HasForeignKey("MedicalWorkerId");
                        });

                    b.OwnsMany("Domain.ValueObjects.DayOff", "DaysOff", b1 =>
                        {
                            b1.Property<Guid>("MedicalWorkerId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<DateTime>("Start")
                                .HasColumnType("smalldatetime");

                            b1.Property<DateTime>("End")
                                .HasColumnType("smalldatetime");

                            b1.HasKey("MedicalWorkerId", "Start", "End");

                            b1.ToTable("DaysOff", "medicalWorkers");

                            b1.WithOwner()
                                .HasForeignKey("MedicalWorkerId");
                        });

                    b.OwnsMany("Domain.ValueObjects.MedicalWorkerProfession", "MedicalWorkerProfessions", b1 =>
                        {
                            b1.Property<string>("MedicalWorkerProfessionEnum")
                                .HasColumnType("nvarchar(450)")
                                .HasColumnName("MedicalWorkerProfession");

                            b1.Property<Guid>("MedicalWorkerId")
                                .HasColumnType("uniqueidentifier");

                            b1.HasKey("MedicalWorkerProfessionEnum", "MedicalWorkerId");

                            b1.HasIndex("MedicalWorkerId");

                            b1.ToTable("MedicalWorkerProfessions", "medicalWorkers");

                            b1.WithOwner()
                                .HasForeignKey("MedicalWorkerId");
                        });

                    b.Navigation("Address");

                    b.Navigation("DaysOff");

                    b.Navigation("EmploymentContracts");

                    b.Navigation("MedicalWorkerProfessions");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Schedule", b =>
                {
                    b.HasOne("Domain.Entities.MedicalTeam", "MedicalTeam")
                        .WithMany()
                        .HasForeignKey("MedicalTeamId");

                    b.OwnsOne("Domain.ValueObjects.MonthAndYearOfSchedule", "MonthAndYearOfSchedule", b1 =>
                        {
                            b1.Property<Guid>("ScheduleId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Month")
                                .HasColumnType("int")
                                .HasColumnName("Month");

                            b1.Property<int>("Year")
                                .HasColumnType("int")
                                .HasColumnName("Year");

                            b1.HasKey("ScheduleId");

                            b1.ToTable("Schedules");

                            b1.WithOwner()
                                .HasForeignKey("ScheduleId");
                        });

                    b.Navigation("MedicalTeam");

                    b.Navigation("MonthAndYearOfSchedule");
                });

            modelBuilder.Entity("Domain.Entities.Shift", b =>
                {
                    b.HasOne("Domain.Entities.MedicalWorker", "CrewMember")
                        .WithMany()
                        .HasForeignKey("CrewMemberId");

                    b.HasOne("Domain.Entities.MedicalWorker", "Driver")
                        .WithMany()
                        .HasForeignKey("DriverId");

                    b.HasOne("Domain.Entities.MedicalWorker", "Manager")
                        .WithMany()
                        .HasForeignKey("ManagerId");

                    b.HasOne("Domain.Entities.MedicalTeam", "MedicalTeam")
                        .WithMany()
                        .HasForeignKey("MedicalTeamId");

                    b.HasOne("Domain.Entities.Schedule", "Schedule")
                        .WithMany("Shifts")
                        .HasForeignKey("ScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Domain.ValueObjects.DateRange", "DateRange", b1 =>
                        {
                            b1.Property<Guid>("ShiftId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<DateTime>("End")
                                .HasColumnType("smalldatetime");

                            b1.Property<DateTime>("Start")
                                .HasColumnType("smalldatetime");

                            b1.HasKey("ShiftId");

                            b1.ToTable("Shifts");

                            b1.WithOwner()
                                .HasForeignKey("ShiftId");
                        });

                    b.Navigation("CrewMember");

                    b.Navigation("DateRange");

                    b.Navigation("Driver");

                    b.Navigation("Manager");

                    b.Navigation("MedicalTeam");

                    b.Navigation("Schedule");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.OwnsMany("Domain.ValueObjects.UserRole", "UserRoles", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(450)")
                                .HasColumnName("RoleCode");

                            b1.HasKey("UserId", "Value");

                            b1.ToTable("UserRoles", "users");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("MedicalWorkerShift", b =>
                {
                    b.HasOne("Domain.Entities.MedicalWorker", null)
                        .WithMany()
                        .HasForeignKey("CrewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Shift", null)
                        .WithMany()
                        .HasForeignKey("ShiftsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Coordinator", b =>
                {
                    b.Navigation("MedicalTeams");
                });

            modelBuilder.Entity("Domain.Entities.Schedule", b =>
                {
                    b.Navigation("Shifts");
                });
#pragma warning restore 612, 618
        }
    }
}
